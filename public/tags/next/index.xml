<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>next on WELCOME</title>
        <link>https://shinsojin.github.io/tags/next/</link>
        <description>Recent content in next on WELCOME</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>SOJINSHIN</copyright>
        <lastBuildDate>Wed, 27 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://shinsojin.github.io/tags/next/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>POLISTAR, 정치인과 기업인들을 위한 여론 보고서</title>
        <link>https://shinsojin.github.io/post/polistar-%EC%A0%95%EC%B9%98%EC%9D%B8%EA%B3%BC-%EA%B8%B0%EC%97%85%EC%9D%B8%EB%93%A4%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%97%AC%EB%A1%A0-%EB%B3%B4%EA%B3%A0%EC%84%9C/</link>
        <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
        
        <guid>https://shinsojin.github.io/post/polistar-%EC%A0%95%EC%B9%98%EC%9D%B8%EA%B3%BC-%EA%B8%B0%EC%97%85%EC%9D%B8%EB%93%A4%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%97%AC%EB%A1%A0-%EB%B3%B4%EA%B3%A0%EC%84%9C/</guid>
        <description>&lt;img src="https://shinsojin.github.io/post/polistar-%EC%A0%95%EC%B9%98%EC%9D%B8%EA%B3%BC-%EA%B8%B0%EC%97%85%EC%9D%B8%EB%93%A4%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%97%AC%EB%A1%A0-%EB%B3%B4%EA%B3%A0%EC%84%9C/polistar-tutorial.png" alt="Featured image of post POLISTAR, 정치인과 기업인들을 위한 여론 보고서" /&gt;&lt;h2 id=&#34;기술-스택&#34;&gt;기술 스택&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;프론트엔드 :&lt;/strong&gt;
&lt;img src=&#34;https://img.shields.io/badge/typescript-3178C6?style=for-the-badge&amp;logo=typescript&amp;logoColor=white&#34; style=&#34;display:inline;&#34;&gt;
&lt;img src=&#34;https://img.shields.io/badge/next-000000?style=for-the-badge&amp;logo=nextdotjs&amp;logoColor=white&#34; alt=&#34;badge&#34;&gt;
&lt;img src=&#34;https://img.shields.io/badge/mui-007FFF?style=for-the-badge&amp;logo=mui&amp;logoColor=white&#34; style=&#34;display:inline;&#34;&gt;
&lt;img src=&#34;https://img.shields.io/badge/axios-5A29E4?style=for-the-badge&amp;logo=axios&amp;logoColor=white&#34; style=&#34;display:inline;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;이미지-모아보기&#34;&gt;이미지 모아보기&lt;/h2&gt;
&lt;h2 id=&#34;설명&#34;&gt;설명&lt;/h2&gt;
&lt;p&gt;당일 보도된 많은 언론사의 정치, 기업뉴스와 여론 조사 결과를 인공지능이 분석하여 대상자의 리포트를 생성해주는 서비스입니다.&lt;br&gt;
하루에 두번, 대상자에 대한 최신 정보와 행보를 생성형 AI를 통해 리포트를 생성하고, 관련 뉴스를 그루핑하여 보여줍니다.&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://dev-www.newssalad.com:8282/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;여기&lt;/a&gt;를 클릭하여 프로젝트를 확인할 수 있습니다.
(단, pc 환경에서는 접속할 수 없습니다. )&lt;/p&gt;
&lt;h2 id=&#34;기능&#34;&gt;기능&lt;/h2&gt;
&lt;h3 id=&#34;공통&#34;&gt;공통&lt;/h3&gt;
&lt;p&gt;• 전용 코드를 통해 구독자와 당사자 구분&lt;br&gt;
• 구독자에게 신규 뉴스 PUSH 알림 발송&lt;br&gt;
• 당사자(정치/기업인)가 직접 사용자에게 보여질 뉴스를 관리할 수 있음&lt;/p&gt;
&lt;h3 id=&#34;리포트&#34;&gt;리포트&lt;/h3&gt;
&lt;p&gt;• 인물에 대한 실시간 뉴스 제공&lt;br&gt;
• 자사 신규 엔진을 이용하여 인물에 대한 커스텀 리포트 생성&lt;br&gt;
• URL 공유를 통해 누구나 자유롭게 인물 리포트 조회(구독) 가능&lt;/p&gt;
&lt;h3 id=&#34;뉴스&#34;&gt;뉴스&lt;/h3&gt;
&lt;p&gt;• 카테고리 별(정당/인물/지역) 뉴스 그루핑
• 원하는 조건을 필터링하여 뉴스 목록 조회 가능
• 연관 뉴스가 있다면 함께 확인 가능
• 내가 조회했던 뉴스의 경우 읽음&lt;br&gt;
• 자사 언론사를 통해 단독 뉴스 보도 가능&lt;/p&gt;
&lt;h2 id=&#34;어려웠던-점--배운점&#34;&gt;어려웠던 점 / 배운점&lt;/h2&gt;
&lt;h4 id=&#34;nextjs를-사용한-이유&#34;&gt;Next.js를 사용한 이유&lt;/h4&gt;
&lt;p&gt;CSR은 초기 로딩 속도가 빠르고, 사용자와의 상호작용이 매끄럽다는 장점이 있지만, 검색 엔진 최적화가 어려우며, 초기 로딩 시간이 길어지는 단점도 있습니다.&lt;/p&gt;
&lt;p&gt;사실 리액트가 익숙했고, CSR 방식만 사용해보았기 때문에 장점과 단점에 크게 공감하지 못했습니다.&lt;br&gt;
이번 프로젝트를 통해 SSR을 접해보고 싶은 목표가 있어 React의 프레임워크인 Next를 사용해보았습니다.
심지어 CSR과 SSR 중에 선택해서 사용할 수 있다니 첫눈에 보기엔 안 쓸 이유가 없어보였습니다.
(물론 React에서도 SSR을 지원하긴 하지만, Next와 비교했을 때 자료나 네임밸류에서 밀린다고 판단하였습니다.)&lt;/p&gt;
&lt;h4 id=&#34;디버깅&#34;&gt;디버깅&lt;/h4&gt;
&lt;p&gt;가장 큰 차이라고 한다면 디버깅에 있었습니다.&lt;br&gt;
React에서는 &lt;code&gt;console.log&lt;/code&gt;를 통해 컴포넌트의 상태 및 데이터를 쉽게 확인할 수 있었습니다.&lt;br&gt;
하지만 Next에서는 서버에서 HTML이 완성되어 클라이언트로 전송되는 형태이기 때문에, 일반적인 방법으로는 console.log를 통한 디버깅이 어려웠습니다.&lt;br&gt;
물론 검색을 통해 Next에서도 디버깅을 하는 여러가지 방법이 있다는 것을 알게되었지만, 처음에는 낯설었습니다.&lt;/p&gt;
&lt;h4 id=&#34;동적-라우팅-페이지-배포시-404-에러-발생&#34;&gt;동적 라우팅 페이지 배포시 404 에러 발생&lt;/h4&gt;
&lt;p&gt;useRouter를 통해 이동하는 경우에는 문제가 없었으나, 새로고침을 하거나 브라우저에서 직접 url을 입력하는 경우에는 404 페이지로 리다이렉팅 되었습니다.&lt;br&gt;
찾아보니 router로 이동할 때는 특정폴더의 page.tsx 파일을 찾아 보여주지만 직접 url을 입력하는 경우 url파라미터명.tsx파일을 찾기에 나타난 에러였습니다.&lt;br&gt;
다시말해 로그인 페이지를 라우팅을 통해 이동하면 &lt;code&gt;login/page.ts&lt;/code&gt;를 찾는데 url을 입력하면 &lt;code&gt;login.ts&lt;/code&gt;파일 찾으려고 합니다.&lt;/p&gt;
&lt;p&gt;이에 따른 해결방법은&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;getStaticPaths, getStaticProps 함수를 사용해서 빌드시 정적 페이지를 모두 생성&lt;/li&gt;
&lt;li&gt;동적 라우팅이 아닌 정적라우팅 생성하기
였습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;프로젝트 특성 상 1000여명이 넘는 사용자(정치인)의 페이지를 생성해야했고, 심지어 사용자가 추가될 때마다 새로 빌드해야했으므로 첫번째 방법은 현실적으로 불가능하다고 판단했습니다.&lt;br&gt;
물론 첫번째 방법이 조금 더 올바른 해결 방법인 것은 알았으나, 배포를 코 앞에 두고 있었기 때문에 두번째 방법을 채택하였습니다.&lt;/p&gt;
&lt;h4 id=&#34;아쉬운-점과-배운점&#34;&gt;아쉬운 점과 배운점&lt;/h4&gt;
&lt;p&gt;신중한 검토 없이 Next가 ‘좋다더라’라는 말만 듣고 바로 선택했던 것이 돌이켜 생각해보면 실수라고 생각합니다.
예상과 달리 React와 차이점이 많았고, 프로젝트 개발 일정이 약 한달 정도로 촉박한 편이었습니다.&lt;br&gt;
서버와 클라이언트 사이드의 구분을 명확히 이해하고 적절한 구조를 설계할 시간이 부족하여, 제게 좀 더 익숙한 길을 선택하는 것이 아쉬웠습니다.
대부분의 컴포넌트에 &lt;code&gt;use client&lt;/code&gt;를 선언하여 사용하여, 사실상 Next를 채택한 의미가 반감되었던 것 같습니다.&lt;/p&gt;
&lt;p&gt;하지만 이를 계기로&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;새로운 기술을 도입할 때에는 충분한 시간과 검토가 필요하다.&lt;/li&gt;
&lt;li&gt;일정이 급하다면 익숙한 것부터 천천히 마이그레이션 할 필요가 있다.&lt;/li&gt;
&lt;li&gt;Next에서 무엇을 공부해야하고, 내게 부족한 지식이 무엇인지 알아 볼 기회였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;라는 것을 배울 수 있었습니다.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
